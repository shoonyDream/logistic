/*!
 * Hamburgers
 * @description Tasty CSS-animated hamburgers
 * @author Jonathan Suh @jonsuh
 * @site https://jonsuh.com/hamburgers
 * @link https://github.com/jonsuh/hamburgers
 */

// Settings
// ==================================================
$hamburger-padding-x                       : 1rem !default;
$hamburger-padding-y                       : 1rem !default;
$hamburger-layer-width                     : 26px !default;
$hamburger-layer-height                    : 3px !default;
$hamburger-layer-spacing                   : 5px !default;
$hamburger-layer-color                     : $white !default;
$hamburger-layer-border-radius             : 0.25rem !default;
$hamburger-hover-opacity                   : 1 !default;
$hamburger-hover-transition-duration       : 0.15s !default;
$hamburger-hover-transition-timing-function: linear !default;

// To use CSS filters as the hover effect instead of opacity,
// set $hamburger-hover-use-filter as true and
// change the value of $hamburger-hover-filter accordingly.
$hamburger-hover-use-filter: false !default;
$hamburger-hover-filter    : opacity(50%) !default;

// Types (Remove or comment out what you donâ€™t need)
// ==================================================
$hamburger-types: (
	squeeze
) !default;

// Hamburger
// ==================================================
.hamburger {
	padding: $hamburger-padding-y $hamburger-padding-x;
	display: inline-block;
	cursor: pointer;

	transition-property: opacity, filter, color;
	transition-duration: $hamburger-hover-transition-duration;
	transition-timing-function: $hamburger-hover-transition-timing-function;

	// Normalize (<button>)
	font: inherit;
	background-color: transparent;
	border: 0;
	margin: 0 -1rem 0 1.8rem;
	overflow: visible;
	color: rgba(255, 255, 255, 0.9);
	text-transform: uppercase;
	outline: none;

	.hamburger-inner, .hamburger-inner::after {
		transition-property: background-color, color;
		transition-duration: $hamburger-hover-transition-duration;
		transition-timing-function: $hamburger-hover-transition-timing-function;
	}

	&:hover {
		@if $hamburger-hover-use-filter == true {
			filter: $hamburger-hover-filter;
		}
		@else {
			opacity: $hamburger-hover-opacity;
		}

		color: $white !important;

		.hamburger-inner, .hamburger-inner::after {
			background-color: $white !important;
		}
	}

	&.is-active {
		color: $white !important;

		.hamburger-inner, .hamburger-inner::after {
			background-color: $white !important;
		}
	}
}

.hamburger-box {
	width: $hamburger-layer-width;
	height: $hamburger-layer-height * 3 + $hamburger-layer-spacing * 2;
	display: inline-block;
	vertical-align: middle;
	position: relative;
}

.hamburger-inner {
	display: block;
	top: 50%;
	margin-top: $hamburger-layer-height / -2;

	&,
	&::before,
	&::after {
		width: $hamburger-layer-width;
		height: $hamburger-layer-height;
		background-color: $hamburger-layer-color;
		border-radius: $hamburger-layer-border-radius;
		position: absolute;
		transition-property: transform;
		transition-duration: 0.15s;
		transition-timing-function: ease;
	}

	&::before,
	&::after {
		content: "";
		display: block;
	}

	&::before {
		top: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
	}

	&::after {
		bottom: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
	}
}

// Hamburger types
// ==================================================
@if index($hamburger-types, squeeze) {
	/*
	 * Squeeze
	 */
	.hamburger--squeeze {
		.hamburger-inner {
			transition-duration: 0.075s;
			transition-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);

			&::before {
				transition: top 0.075s 0.12s ease, opacity 0.075s ease;
			}

			&::after {
				transition: bottom 0.075s 0.12s ease, transform 0.075s cubic-bezier(0.55, 0.055, 0.675, 0.19);
			}
		}

		&.is-open {
			.hamburger-inner {
				transform: rotate(45deg);
				transition-delay: 0.12s;
				transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);

				&::before {
					top: 0;
					opacity: 0;
					transition: top 0.075s ease, opacity 0.075s 0.12s ease;
				}

				&::after {
					bottom: 0;
					transform: rotate(-90deg);
					transition: bottom 0.075s ease, transform 0.075s 0.12s cubic-bezier(0.215, 0.61, 0.355, 1);
				}
			}
		}
	}
}

// ==================================================
// Cooking up additional types:
//
// The Sass for each hamburger type should be nested
// inside an @if directive to check whether or not
// it exists in $hamburger-types so only the CSS for
// included types are generated.
//
// e.g. hamburgers/types/_new-type.scss
//
// @if index($hamburger-types, new-type) {
//   .hamburger--new-type {
//     ...
//   }
// }


@media (max-width: 1150px) {
	.hamburger {
		margin-left: auto;
	}

	.nav-container {
		right: 0;
		top: 60px;
		width: 100vw;
		overflow: auto;
		position: fixed;
		background-color: $charade;
		height: calc(100vh - 60px);

		.main-nav {
			padding: 20px 0;
		}

		.main-nav__link {
			color: $white;
			display: block;
			font-size: 18px;
			padding: 10px 20px;
			text-decoration: none;
		}

		.main-nav__link.active,
		.main-nav__link:hover,
		.main-nav__link:focus {
			color: #42a9ed;
		}
	}
}

@media (max-width: 420px) {
	.hamburger {
		padding: 10px;
	}
}
